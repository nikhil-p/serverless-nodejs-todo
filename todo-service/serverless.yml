# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: todo

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
     Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  #  - Effect: "Allow"
  #    Action:
  #      - "s3:PutObject"
    #  Resource:
    #    Fn::Join:
    #      - ""
    #      - - "arn:aws:s3:::"
    #        - "Ref" : "ServerlessDeploymentBucket"
    #        - "/*"

# you can define service wide environment variables here


# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  create:
    handler: todos.create
    events:
      - http:
         path: todos
         method: post
         cors: true

  list:
    handler: todos.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  listbyid:
    handler: todos.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: todos.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: todos.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

# you can add CloudFormation resource templates here
resources:
 Resources:
   DyanamoDBTodosTable:
     Type: 'AWS::DynamoDB::Table'
     DeletionPolicy: Retain
     Properties:
      AttributeDefinitions:
        -
         AttributeName: id
         AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: ${self:provider.environment.DYNAMODB_TABLE}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
